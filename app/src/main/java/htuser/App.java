/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package htuser;

import com.google.gson.Gson;
import htuser.data.Project;
import htuser.data.Trajectory;
import java.io.File;
import java.io.FileInputStream;
import java.nio.charset.Charset;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.team2363.helixtrajectory.*;

public class App {

  public static Project loadFromFile(String fname) throws Exception {
    FileInputStream inputStream = new FileInputStream(fname);
    try {
      String everything = IOUtils.toString(inputStream, Charset.defaultCharset());
      return new Gson().fromJson(everything, Project.class);
    } finally {
      inputStream.close();
    }
  }

  public static void writeToFile(String fname, Trajectory content) throws Exception {
    FileUtils.write(new File(fname), new Gson().toJson(content.samples), Charset.defaultCharset());
  }

  public static void main(String[] args) throws Exception {
    if (args.length < 1 || args.length > 2) {
      System.out.println(
          "USAGE: htuser.App [project path] (path name | \"all\").\n\tIf only [project path] is provided, all path names are printed.");
      return;
    }

    var proj = loadFromFile(args[0]);

    for (var kv : proj.paths.entrySet()) {
      if (args.length == 1) {
        System.out.println(kv.getKey());
      } else if ("all".equals(args[1])
          || kv.getKey().startsWith(args[1])
          || kv.getKey().endsWith(args[1])) {
        var fname =
            String.format(
                "%s-%s.path.json", args[0].substring(0, args[0].length() - 5), kv.getKey());

        System.out.println(fname);
        var drive = proj.robot_configuration.toDrivetrain();

        var path = kv.getValue().toHolonomicPath();

        System.out.println("Drivetrain:\n");
        System.out.println(drive);
        System.out.println("Path:\n");
        System.out.println(path);
        try {
          var traj = OptimalTrajectoryGenerator.generate(drive, path);

          writeToFile(fname, new Trajectory(traj));
        } catch (Exception ex) {
          System.out.println(String.format("Failed to generate or save trajectory: %s", ex.getLocalizedMessage()));
          ex.printStackTrace();
        }
      }
    }
  }
}
